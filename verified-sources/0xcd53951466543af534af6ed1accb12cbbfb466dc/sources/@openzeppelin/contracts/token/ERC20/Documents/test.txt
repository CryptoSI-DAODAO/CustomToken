
Firebase test - Jude Oba


Test description table


Test name 
Firebase 
Test type
Programming Skills
Test summary 
[255]
This Firebase test evaluates candidates’ ability to work with Firebase services. This screening test will help you hire developers who can build secure and scalable applications, handle real-time updates, and implement Cloud Functions with Firebase. 
Test description
[1000]
Hiring candidates with strong skills in Firebase brings significant benefits to your organization. They will play a crucial role in developing and managing robust, scalable, and secure applications using Firebase's comprehensive suite of tools and services.

This Firebase test evaluates candidates' abilities in Firebase Authentication, Firestore Database, Cloud Functions, and Firebase Cloud Messaging. This screening test will allow you to assess their proficiency in implementing user authentication and authorization, optimizing database structures, managing real-time data, handling file storage, implementing serverless functions, and deploying applications using Firebase Hosting.

This Firebase test will help you identify skilled developers who can leverage Firebase effectively, ensuring secure and scalable application development. Candidates who perform well on this test will demonstrate their expertise in handling real-world Firebase challenges. They will showcase their ability to architect scalable and secure Firebase solutions, optimize database performance, implement serverless functions for backend logic, and deploy applications seamlessly. Hiring these qualified professionals will lead to enhanced productivity, improved user experiences, and overall business success.

By utilizing this Firebase test, you can confidently assess candidates' proficiency in Firebase and make informed hiring decisions. This test provides valuable insights into their practical skills and knowledge, enabling you to identify the right talent who will contribute to your organization's growth and innovation. With skilled Firebase experts on your team, you can deliver high-quality, scalable, and secure applications that meet the demands of today's technology-driven landscape.
This test is relevant for
[300]
Firebase Developers, Firebase Administrators, Firebase Architects, Firebase Consultants, Firebase Engineers, Firebase Solution Specialists, and any other roles requiring an intermediate grasp of Firebase.


Level
Intermediate
Number of questions delivered to test-takers in the test
16
Covered skill areas
[3 or 4]
Firebase Authentication
Firestore Database
Cloud Functions for Firebase
Firebase Cloud Messaging






Test structure/outline


Skill Areas
Categories
Firebase Authentication


User Registration and Login.
Implementing Secure Authentication Flows.
Managing User Roles and Permissions.
Integration with External Identity Providers.
Implementing Two-Factor Authentication.
Firestore Database
CRUD Operations (Create, Read, Update, Delete). 
Querying and Indexing Firestore Data.
Implementing Real-time Data Synchronization.
Firestore Security Rules and Data Validation.
Designing and Structuring Firestore Collections and Documents.
Cloud Functions for Firebase.
Developing and Deploying Cloud Functions.
Triggering Functions with Firebase and Third-Party Events.
Integrating Cloud Functions with other Firebase Services.
Optimizing Function Performance and Scalability.
Error Handling and Logging in Cloud Functions.
Firebase Cloud Messaging
Sending and Receiving Push Notifications.
Configuring and Managing Message Topics.
Customizing Notification Payloads.
Handling Message Delivery and Receipts.
Implementing Token Refresh and Registration Management.


Sources consulted in researching the structure and questions, including AI model, if used: 


ChatGPT-3.5 turbo.







Preview Questions


Preview Question 1
Rationale and/or logic for the correct answer(s):  The correct option involves adding a unique salt value to each password before hashing, enhancing security against precomputed hash attacks.

Notes on AI use, if applicable: The question and options were rewritten and modified to follow standards by the AI.

[Implementing Secure Authentication Flows / Firebase Authentication]
Question type: Multiple choice
You are a Firebase developer working on an e-commerce store with a Firebase backend. You want to secure the storage of user passwords on your site.

What should you do?
1 point
Use a salted hash algorithm to hash passwords securely.
0 points
Use a symmetric encryption algorithm to store password digests.
0 points
Use a database with restricted access permissions to store passwords.
0 points
Use a secure token-based authentication mechanism for password storage.


Preview Question 2
Rationale and/or logic for the correct answer(s):   The correct action is A. By reviewing and updating the security rules, you can identify and fix any misconfigurations that are allowing unauthorized access. 
Notes on AI use, if applicable:      
 
Firestore Security Rules and Data Validation/ Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a mobile app, and you are using Firestore for your backend database. You have implemented security rules to restrict access to sensitive data. However, you notice that a user with unauthorized access is able to read and modify the sensitive data.

What should you do to address this vulnerability?
1 point
Review and update Firestore security rules for proper access restrictions on sensitive data.
0 points
Implement Firebase Authentication to enforce access controls and authenticate users.
0 points
Utilize Firebase Cloud Functions for server-side validation and authorization checks on sensitive data.
0 points
Implement additional security measures to strengthen the protection of sensitive data.


Preview Question 3
Rationale and/or logic for the correct answer(s): Enabling Firebase Crashlytics provides a robust solution for error tracking and reporting. By integrating Crashlytics into the Firebase Cloud Function, you gain valuable insights into any unexpected errors that may occur during critical database operations.

Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You are a developer working with Firebase Cloud Functions. You encounter an unexpected error during a critical database operation. The function crashes, but the error message and details are not logged. This lack of information poses a challenge in identifying the error's cause and troubleshooting. 

What should you do?
1 point
Enable Firebase Crashlytics to capture and report errors within the Cloud Function.
0 points
Utilize Firebase Performance Monitoring to track the Cloud Function's performance.
0 points
Implement Firebase Remote Config for real-time adjustment of the Cloud Function's behavior.
0 points
Integrate Firebase Analytics to gain insights into user interactions within the Cloud Function.


Preview Question 4

Rationale and/or logic for the correct answer(s):    The correct action to take in this scenario is option A) .By investigating the logs, you can identify any potential errors or issues that may be causing the delay in delivering notifications to subscribed users.

Notes on AI use, if applicable:    
   
Configuring and Managing Message Topics / Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer configuring Message Topics for a messaging app. You find that despite correct topic subscriptions, some users experience a five-minute delay in receiving notifications.

What should you do to troubleshoot this delayed notification issue?
1 point
Verify the accuracy of user topic subscriptions and device tokens.
0 points
Increase the notification priority level for all users to expedite delivery.
0 points
Upgrade the server hardware to handle higher notification load.
0 points
Modify the authentication flow to ensure notifications are sent only to verified users.



------------------------
Once the first deliverable is approved, we will create questions sections for each skill area and number questions as shown below (so we can keep adding more questions to each section as we move forward). You can find additional question templates for each type of question you can use in your test at the end of this document.

Firebase Authentication
User Registration and Login
Question 1.1

Rationale and/or logic for the correct answer(s):    The correct answer is option B.This approach ensures both security and user experience. By sending a password reset link to the user's registered email address, users can securely set a new password without exposing their account credentials.

Notes on AI use, if applicable:       

User Registration and Login / Firebase Authentication
Question type: Multiple choice
You are developing a web application that handles sensitive user data and requires a robust account recovery and password reset mechanism. You want to implement an effective account recovery and password reset mechanism.

Which approach should you use?
0 points
Allow users to reset their passwords by answering a security question that they set during the account creation process.
1 point
Send a password reset link to the user's registered email address.
0 points
Generate a temporary password on the account recovery page after successful identity verification.
0 points
Automatically generate a new password and send it to the user's registered email address.



Question 1.2 

Rationale and/or logic for the correct answer(s):  The correct answer is option D. This approach offers a balance between providing useful information and maintaining security. By stating the nature of the authentication failure, such as "Invalid email or password," users receive enough information to troubleshoot the issue without compromising sensitive details.   

Notes on AI use, if applicable:       

User Registration and Login / Firebase Authentication
Question type: Multiple choice
You are developing a web application that utilizes Firebase Authentication for user login. You want to ensure that proper error handling and informative error messages are displayed to users when authentication errors occur.


Which approach should you use?
0 points
Present detailed error messages, including specific error codes and technical information.
0 points
Present a general error message for all authentication failures.
0 points
Redirect users to a separate error page with a general error message, prompting them to contact customer support for assistance.
1 point
Present a simple error message, including the nature of the authentication failure.




Question 1.3

Rationale and/or logic for the correct answer(s):    The correct option is A) Utilizing Firebase Authentication's built-in email verification feature. Firebase Authentication provides a convenient and secure method for implementing email verification by sending a verification link directly to the user's provided email address.

Notes on AI use, if applicable:       

User Registration and Login / Firebase Authentication
Question type: Multiple choice
 You are a Firebase developer tasked with improving the user registration and login process for a mobile application. The app requires users to verify their email addresses upon registration to ensure a secure and reliable user base.

How should you implement email verification in Firebase?
0 points
Implement a custom email verification system using Firebase Cloud Functions and Firebase Realtime Database to handle the verification process.
0 points
Integrate the app with a third-party email service provider to send custom verification emails and handle the verification process through external APIs.
1 point
 Use Firebase Authentication's built-in email verification feature to send a verification link to the user's provided email address.
0 points
Store the user's email verification status in Firestore and manually trigger email verifications through a background job scheduler.




Question 1.4

Rationale and/or logic for the correct answer(s):    The correct option for implementing account suspension or blocking functionality for users is option A. Implement a suspension status field in the user database, which, when set to "suspended," restricts access and functionality for the user. This approach allows you to manage user account statuses without completely disabling the account or blocking their IP address.

Notes on AI use, if applicable:     
  
User Registration and Login / Firebase Authentication
Question type: Multiple choice
You are developing a social media application where users can post content and interact with one another. As part of the platform's moderation system, you want to implement the ability to suspend or block user accounts for violating community guidelines, temporarily restricting the user's access to the platform and their ability to post or engage with other users.

What should you do to accomplish this?
1 point
Implement a suspension status field in the user database, which, when set to "suspended," restricts access and functionality for the user.
0 points
Use Firebase Authentication to temporarily disable the user account, preventing any login attempts.
0 points
Implement a flagging system that allows users to report inappropriate content, and automatically suspend accounts with a certain number of flagged posts.
0 points
Block the suspended user's IP address temporarily, to prevent them from accessing the platform.




Question 1.5

Rationale and/or logic for the correct answer(s):    The correct option is option A. Firebase Realtime Database can be used to store and check usernames. This ensures that each username is unique and not already taken.

Notes on AI use, if applicable:       

User Registration and Login / Firebase Authentication
Question type: Multiple choice
You are building a web application that requires user registration and login. You want to ensure that users can only register using a unique username. Usernames must be something other than e-mail addresses. Your app does not have the functionality to check when a username is already taken.

What should you do?
1 point
Use the Firebase Realtime Database to store and check usernames.
0 points
Implement a custom username validation feature using Firebase Cloud Functions.
0 points
Use a third-party library to check if a username is already taken.
0 points
Use Firebase Authentication's built-in email validation feature to ensure unique usernames.




Implementing Secure Authentication Flows
Question 1.6

Rationale and/or logic for the correct answer(s): The correct answer is option A. Including the access tokens in the request headers for each API call using secure HTTPS communication, This ensures that the access tokens are transmitted securely over an encrypted connection, protecting them from unauthorized access or interception.    

Notes on AI use, if applicable:   
    
Implementing secure authentication flows / Firebase Authentication
Question type: Multiple choice
You are implementing OAuth and social media authentication integration in a mobile application. You want to correctly handle the access tokens obtained from the identity provider.

What should you do?
1 point
Include the access tokens in the request headers for each API call using secure HTTPS communication.
0 points
Store the access tokens in a database with strong encryption and access control measures.
0 points
Hash the access tokens using a one-way hashing algorithm before storing them in your application's local storage.
0 points
Store the access tokens in a separate file on the device's file system with limited access permissions.




Question 1.7

Rationale and/or logic for the correct answer(s):    The correct option is B.  Biometric authentication provides an additional layer of security for device-based authentication. By utilizing fingerprint or face recognition technologies, users can authenticate themselves on their trusted devices, ensuring a secure and convenient login experience.
Notes on AI use, if applicable:       

Implementing secure authentication flows / Firebase Authentication
Question type: Multiple choice
You are a developer working on a mobile banking app. You want to enhance the security of user authentication by implementing device-based authentication with Firebase. 

What should you do?
0 points
Store a unique device identifier in Firebase Authentication user records.
1 point
 Implement biometric authentication such as fingerprint or face recognition for device-based login.
0 points
Use the Firebase Authentication SDK to retrieve the device's unique hardware identifier.
0 points
Use Firebase Cloud Messaging to send one-time verification codes to trusted devices.




Question 1.8

Rationale and/or logic for the correct answer(s):    The correct answer is option A. Short-lived tokens reduce the window of vulnerability in case of token theft or unauthorized access

Notes on AI use, if applicable:       

Implementing secure authentication flows / Firebase Authentication
Question type: Multiple choice
You are implementing session management and token-based authentication in a web app to ensure secure user sessions. When a user successfully logs in, they receive an authentication token that is generated and issued by the server. You want your application to use token-based authentication for subsequent requests.

What should you do?
1 point
Use short-lived tokens with frequent re-authentication to enhance security.
0 points
Store tokens in URL-encoded text format for easy retrieval and validation.
0 points
Implement session persistence by storing tokens in client-side cookies.
0 points
Store tokens in a public cloud storage bucket for convenient access.




Question 1.9

Rationale and/or logic for the correct answer(s):   The correct option is D,Integrate Firebase Authentication with a third-party identity provider that supports OpenID Connect (OIDC) protocol.By integrating with an OIDC-compliant provider, you can enable users to sign in using their existing corporate accounts, ensuring a seamless and secure authentication experience.

Notes on AI use, if applicable:       

Implementing secure authentication flows / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer working on a multi-tenant application and you want to implement identity federation to allow users to sign in with their existing corporate accounts.

What should you do?
0 points
Use Firebase Authentication's built-in support for Active Directory Federation Services (ADFS) for seamless integration with corporate accounts.
0 points
Implement a custom authentication system using Firebase Authentication and store user credentials securely in Firebase Firestore.
0 points
Implement a Security Assertion Markup Language (SAML) integration with the corporate identity provider for seamless authentication.
1 point
Integrate Firebase Authentication with a third-party identity provider that supports OpenID Connect (OIDC) protocol.




Question 1.10

Rationale and/or logic for the correct answer(s):    The correct option is D Implementing a centralized identity provider with protocols like OAuth,  This approach eliminates the need for separate authentication systems on each platform and provides a consistent and unified authentication experience for users across different platforms.

Notes on AI use, if applicable:       

Implementing secure authentication flows / Firebase Authentication
Question type: Multiple choice
You are developing a system that consists of multiple platforms, including a web application, an iOS app, and an Android app. You want to implement a Single Sign-On (SSO) solution, allowing users to authenticate once and access all platforms seamlessly.

Which approach is most suitable for achieving this?
0 points
Storing user credentials locally on each platform and enabling cross-platform synchronization.
0 points
Maintaining separate authentication systems for each platform and synchronizing user credentials.
0 points
Using platform-specific authentication mechanisms, such as Firebase Authentication for web and Firebase Auth SDKs for mobile apps.
1 point
 Implementing a centralized identity provider with protocols like OAuth.



Managing User Roles and Permissions

Question 1.11

Rationale and/or logic for the correct answer(s):    Option B is the correct answer. Firestore Security Rules allow you to define access control logic at the database level, ensuring that only authorized users can write to the database.

Notes on AI use, if applicable:       

Managing User Roles and Permissions / Firebase Authentication
Question type: Multiple choice
You are developing a mobile app that allows users to post and view content. You want to ensure that only authenticated users can post content, while all users can view content. You use Firebase authentication to authenticate users.


What should you use to allow users to post content?
0 points
Firestore Documents
1 point
Firestore Security Rules
0 points
Cloud Functions
0 points
Custom authentication and authorization logic




Question 1.12

Rationale and/or logic for the correct answer(s):    The correct option is D, Using Firebase Authentication in conjunction with Firestore Security Rules provides a comprehensive solution for user authentication and access control. This approach offers a secure and scalable solution for controlling access to fitness class bookings in the mobile app.

Notes on AI use, if applicable:    
   
Managing User Roles and Permissions / Firebase Authentication
Question type: Multiple choice
You are developing a mobile app that allows users to book fitness classes. You want to ensure that only authenticated users can book classes, while fitness instructors can view and manage their classes. You use Firebase authentication to authenticate users.

What should you use to define access control logic?
0 points
Token-based Security
0 points
Custom authentication and authorization logic
0 points
Cloud Functions
1 point
Firestore security rules




Question 1.13

Rationale and/or logic for the correct answer(s):    the correct response is to use Firebase Authentication to authenticate users, Firestore Security Rules to define access control logic, and custom claims to define user roles (option B). This ensures that the desired access control requirements are met, allowing group owners and members to have appropriate privileges within the app.

Notes on AI use, if applicable:  
     
Managing User Roles and Permissions / Firebase Authentication
Question type: Multiple choice
You are developing a mobile app that allows users to create and join groups. You want to ensure that group owners can manage their own groups, while group members can only view the group content. 

What should you use to define user roles?
0 points
Cloud Functions
1 point
Custom claims
0 points
Firestore documents
0 points
Token-based security




Question 1.14
Rationale and/or logic for the correct answer(s):    The recommended approach to achieve access control in this scenario is option a) Create a separate collection to store user roles and permissions. By implementing security rules that check the user's role before allowing read and write operations on user profiles, you can ensure that only authorized users have access.
Notes on AI use, if applicable:       

Managing User Roles and Permissions / Firebase Authentication
Question type: Multiple choice
In a social media application built on Firebase Firestore, you want to implement access control to ensure that only authorized users can read and write to specific user profiles. You also want to allow administrators to have full access to all user profiles.

Which approach should you use?
1 point
Create a separate collection to store user roles and permissions and implement security rules that check the user's role.
0 points
Grant read and write access to all user profiles by default and rely on Firebase Authentication to handle access control based on the user's role.
0 points
Use Firebase Authentication to authenticate users and then handle access control on the client side.
0 points
Set up Firestore security rules to allow read and write access to user profiles based on the user's authentication status.




Question 1.15
Rationale and/or logic for the correct answer(s):    Option c) is the correct answer as it suggests reviewing and updating the security rules to ensure proper authorization checks are in place, effectively preventing unauthorized access attempts.

Notes on AI use, if applicable:       

Managing User Roles and Permissions / Firebase Authentication
Question type: Multiple choice
You are developing a web application using Firebase Firestore as the backend database. You have implemented security rules to control access to the data, but some users are still able to access unauthorized documents. Upon investigation, you suspect that an authorization error is occurring.

What should you do?
0 points
Implement client-side access controls using JavaScript to restrict unauthorized access.
0 points
Enable Firestore auditing to track and monitor unauthorized access attempts.
1 point
Review and update the security rules to ensure proper authorization checks are in place.
0 points
Add additional layers of encryption to the Firestore database for enhanced security.


Integration with External Identity Providers

Question 1.16
Rationale and/or logic for the correct answer(s): Option C is the correct answer. It is crucial to implement the necessary code in your app to handle the Google Sign-In flow, which includes requesting user consent, receiving and validating the ID token, and signing in the user with Firebase Authentication.   

Notes on AI use, if applicable:       

Integration with external Identity providers / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer configuring authentication for a mobile app using Firebase Authentication with Google Sign-In. You want to ensure a seamless user experience by handling the authentication process correctly.

Which step is essential for setting up Firebase Authentication with Google Sign-In?
0 points
Enabling the Google Sign-In provider in the Firebase console.
0 points
Creating and registering a new OAuth 2.0 client ID in the Google Cloud Console.
1 point
Implementing the code necessary to handle the Google Sign-In flow in your app.
0 points
Adding the necessary dependency in the app-level “build.gradle” file.




Question 1.17
Rationale and/or logic for the correct answer(s):    Option D) is the correct answer. To use Firebase Authentication with Microsoft Azure Active Directory, you need to enable the Azure Active Directory provider in the Firebase project settings and configure the necessary client ID and client secret. This allows Firebase to communicate with Azure Active Directory for authentication purposes.

Notes on AI use, if applicable:       

Integration with external Identity providers / Firebase Authentication
Question type: Multiple choice
You are a mobile app developer working on a healthcare application. You are tasked with implementing secure user authentication using Firebase Authentication with Microsoft Azure Active Directory. The healthcare app requires seamless integration with Azure Active Directory to ensure the privacy and security of user data.

What should you do?
0 points
Create a custom authentication flow using Firebase Authentication, bypassing the need for Azure Active Directory integration.
0 points
Add the Azure Active Directory SDK to your mobile or web app and use it to handle the authentication process.
0 points
Grant permissions to Firebase users directly in the Azure Active Directory admin console for seamless authentication.
1 point
Enable the Azure Active Directory provider in the Firebase project settings and configure the necessary client ID and client secret.




Question 1.18
Rationale and/or logic for the correct answer(s):    Option C is the correct answer, Firebase Authentication Triggers enable you to run server-side code in response to authentication events, such as user creation or sign-in. By utilizing these triggers, you can modify the registration flow and add additional fields during the registration process.

Notes on AI use, if applicable:       

Integration with external Identity providers / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer working on a web application. You want to provide users with the option to register and log in using their existing Google or Facebook accounts. You have successfully integrated Firebase Authentication with the respective identity providers. Now, you want to customize the registration and login experience by adding additional fields during the registration process.

What should you do to achieve this customization?
0 points
Configure custom claims to capture additional user information.
0 points
Utilize the Firebase Realtime Database to store the extra registration fields.
1 point
Implement Firebase Authentication Triggers to modify the registration flow.
0 points
Deploy the application using Firebase Hosting for an enhanced user experience.




Question 1.19
Rationale and/or logic for the correct answer(s):    the best course of action to investigate and resolve the issue is option a) Verify that the correct Apple Developer Team ID is entered in the Firebase project settings. This step ensures the correct linkage between Firebase and Apple Sign-In.

Notes on AI use, if applicable:       

Integration with external Identity providers / Firebase Authentication
Question type: Multiple choice
You are a developer integrating Firebase Authentication with Apple Sign-In for an iOS app. You are facing an issue where users are unable to sign in using their Apple ID. You have already implemented the necessary code and configurations for Apple Sign-In.

What should you investigate to resolve this issue?
1 point
Verify that the correct Apple Developer Team ID is entered in the Firebase project settings.
0 points
Check if the required Sign-In with Apple entitlement has been added to the app's entitlements file.
0 points
Ensure that the correct Firebase configuration file is integrated into the Xcode project.
0 points
Verify that the app's Bundle Identifier matches the one registered in the Apple Developer Portal.




Question 1.20
Rationale and/or logic for the correct answer(s):    The correct option is D, Integrating the external identity provider's MFA solution is the correct action to implement MFA effectively. It leverages the capabilities provided by the external provider and ensures a secure and seamless authentication experience.

Notes on AI use, if applicable:       

Integration with external Identity providers / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer working on a web application for a financial institution. You are responsible for enhancing the security of the authentication process. The institution requires implementing multi-factor Authentication (MFA) to provide an additional layer of security for user accounts. You want to integrate MFA with an external identity provider that specializes in secure authentication solutions.

What should you do?
0 points
Store the user's MFA credentials in the Firebase Firestore database.
0 points
Develop a custom MFA solution using Firebase Authentication services.
0 points
Implement a time-based one-time password (TOTP) generator for generating the second factor.
1 point
Integrate the external identity provider's MFA solution into the authentication flow.



Implementing Two-Factor Authentication

Question 1.21
Rationale and/or logic for the correct answer(s):  The correct option is B, Using SMS to deliver authentication codes is a widely accepted and secure approach. It leverages the user's mobile device and the existing SMS infrastructure to deliver codes directly to their phone.  

Notes on AI use, if applicable:       

Implementing Two-Factor Authentication / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer working on an authentication system for a banking application. You want to implement an authentication code generation and delivery mechanism for user verification during the login process. The security of the authentication process is crucial to protect sensitive user information and prevent unauthorized access.

Which approach should you take?
0 points
Send authentication codes via encrypted email.
1 point
Send authentication codes via SMS.
0 points
Send QR codes via encrypted email.
0 points
Store authentication codes in the user's browser cookies.




Question 1.22
Rationale and/or logic for the correct answer(s):   Option D is the correct answer,  It involves the user installing an authenticator app on their mobile device, which generates a unique, time-limited code that they enter during the login process. This ensures an additional layer of security by requiring something the user has (their mobile device) along with their regular login credentials.

Notes on AI use, if applicable:       

Implementing Two-Factor Authentication / Firebase Authentication
Question type: Multiple choice
You are a web developer working on a Fintech web application powered by Firebase. You are tasked with implementing two-factor authentication (2FA) in the Firebase authentication flow to enhance the security of user accounts.


Which method should you use?
0 points
Send a one-time verification code to the user's registered email address.
0 points
Require the user to answer a security question during the login process.
0 points
Implement hardware token-based authentication as 2FA.
1 point
Send a one-time verification code to the user's registered phone number.




Question 1.23
Rationale and/or logic for the correct answer(s):     Option B is a suitable approach for providing backup and recovery options for 2FA in Firebase. By implementing a secondary email verification process, users can verify their identity through their registered email address if they lose access to their 2FA device

Notes on AI use, if applicable:       

Implementing Two-Factor Authentication / Firebase Authentication
Question type: Multiple choice
 You are a Firebase developer responsible for implementing two-factor authentication (2FA) for a mobile banking app. You want to ensure that users have reliable backup and recovery options in case they lose access to their 2FA device.
 
What should you use as a backup for 2FA?
0 points
Backup codes that users can generate and securely store
1 point
A secondary email verification process
0 points
Security questions and answers
0 points
A fingerprint or facial recognition scan 




Question 1.24
Rationale and/or logic for the correct answer(s):    The correct option is a) Enable and configure Firebase Authentication to enforce user authentication. This action helps ensure secure access to the real-time database with two-factor authentication.

Notes on AI use, if applicable:       

Implementing Two-Factor Authentication / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer responsible for implementing two-factor authentication (2FA) to enhance the security measures for a real-time database containing sensitive data.

What should you do?
1 point
Enable and configure Firebase Authentication to enforce user authentication.
0 points
Implement a biometric authentication system for the second factor.
0 points
Implement a fingerprint or facial recognition authentication method. 
0 points
Set up security rules in the real-time database to restrict access to authorized users.




Question 1.25
Rationale and/or logic for the correct answer(s):    : The correct option is A, this option Requires users to provide a password and a unique verification code sent via SMS or email during login.This option combines the use of a traditional password with an additional verification code sent via SMS or email. It follows the principle of two-factor authentication (2FA) by requiring users to provide something they know (password) and something they have (verification code) to authenticate their identity. 


Notes on AI use, if applicable:       

Implementing Two-Factor Authentication / Firebase Authentication
Question type: Multiple choice
You are a Firebase developer tasked with implementing two-factor authentication (2FA) for accessing the Firebase Real-time Database.

What should you do?
1 point
Require users to provide a password and a unique verification code sent via SMS during login.
0 points
Use biometric authentication, such as fingerprint or facial recognition, to authenticate users in addition to their regular credentials.
0 points
Create a custom security token that users must provide along with their credentials to access the Real-time Database.
0 points
Implement a time-based one-time password (TOTP) authentication mechanism.




Firestore Database
CRUD Operations

Question 2.1
Rationale and/or logic for the correct answer(s):    The correct option is A. Use the add() method provided by the Firestore SDK with the post data. The add() method is specifically designed for creating new documents in Firestore and simplifies the process.

Notes on AI use, if applicable:       

CRUD Operations / Firestore Database
Question type: Multiple choice
You are developing a social media app using Firebase Firestore as the backend. The app allows users to create new posts, which are stored as documents in Firestore.

How can you create a new document in Firestore to represent a user's post?
1 point
Use the add() method provided by the Firestore SDK with the post data.
0 points
Execute an SQL query to insert a new row into the Firestore database.
0 points
Send a POST request to the Firestore REST API with the post data.
0 points
Manually insert a new document using the Firebase Admin SDK.



Question 2.2 
Rationale and/or logic for the correct answer(s):    The correct option is D. Execute a query against the Firestore collection, specifying the product ID as a filter criterion. Firestore provides powerful querying capabilities that allow you to retrieve specific documents based on specified criteria, such as the product ID

Notes on AI use, if applicable:       

CRUD Operations / Firestore Database
Question type: Multiple choice
You are a Firebase developer building an e-commerce app that stores product information in Firestore. You need to retrieve a specific product document based on its unique product ID.

What should you do to retrieve the document?
0 points
Use the get() method to fetch all documents in the collection and manually search for the document with the matching product ID.
0 points
Use the getAll() method to retrieve all documents in the collection and then filter them on the client-side based on the product ID.
0 points
Access the Firestore database directly using low-level database APIs to fetch the document with the matching product ID.
1 point
Execute a query against the Firestore collection, specifying the product ID as a filter criterion.




Question 2.3
Rationale and/or logic for the correct answer(s):    The correct option is B. Execute a query against the database, specifying the message identifier as a filter criterion, and retrieve the returned data. Firebase Real-time Database allows querying data based on various criteria, including the unique identifier of the message.

Notes on AI use, if applicable:       

CRUD Operations / Firestore Database
Question type: Multiple choice
You are a Firebase developer building a real-time chat application that retrieves messages from a Firebase Real-time Database. You want to implement a functionality to fetch a specific message from the database based on its unique identifier.
 
What should you do to retrieve a specific message?
0 points
Use the getValue() method provided by the Firebase Real-time Database SDK, passing the message identifier as a parameter.
1 point
Execute a query against the database, specifying the message identifier as a filter criterion, and retrieve the returned data.
0 points
Access the Firebase Real-time Database directly using low-level database APIs and retrieve the message with the matching identifier.
0 points
Use the getChild() method provided by the Firebase Real-time Database SDK, passing the message identifier as a parameter.




Question 2.4
Rationale and/or logic for the correct answer(s):    The correct option is D. Use the setValue() method provided by the Firebase Real-time Database SDK, passing the updated data and the user's unique identifier as parameters. This method is specifically designed to update a record in the Firebase Real-time Database.

Notes on AI use, if applicable:       

CRUD Operations / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a messaging app that allows users to update their profile information stored in the Firebase Real-time Database. You want to update a specific user's record in the database.

What should you do?
0 points
Execute a query against the Firebase Real-time Database, specifying the user's ID as a filter criterion, and update the returned record.
0 points
Access the Firebase Real-time Database directly using low-level database APIs and modify the user's record based on its unique identifier.
0 points
Use the update() method provided by the Firebase Real-time Database SDK, passing the updated data and the user's identifier as parameters.
1 point
Use the setValue() method provided by the Firebase Real-time Database SDK, passing the updated data and the user's unique identifier as parameters.




Question 2.5
Rationale and/or logic for the correct answer(s):    The correct option is B. Create a subcollection under the "post123" document named "comments" and retrieve all documents from that subcollection. By creating a subcollection under the "post123" document called "comments", you can store all the comments for that specific post within that subcollection. To retrieve all the comments, you would query the "comments" subcollection of the "post123" document. This approach allows for better organization and easy retrieval of comments associated with a specific post.

Notes on AI use, if applicable:       

CRUD Operations / Firestore Database
Question type: Multiple choice
You are developing a social media application using Firestore as the database. Users can create posts, and each post can have multiple comments associated with it. You use subcollections to store the comments for each post. Now you want to retrieve all comments for a specific post with the document ID "post123".

What should you do?
0 points
Create a separate collection to store comments and query based on the "postID" field.
1 point
Create a subcollection under the "post123" document named "comments" and retrieve all documents from that subcollection.
0 points
Create a separate Firestore document to store the comments and reference them using the "post123" document ID.
0 points
Create a separate Firestore collection to store comments and query based on a combination of the "postID" and "commentID" fields.




Designing and Structuring Firestore Collections and Documents
Question 2.6
Rationale and/or logic for the correct answer(s):    The correct option is B. Creating a Firestore collection for each conversation and storing messages as documents within the respective collection. In this scenario, creating a Firestore collection for each conversation allows for better organization and scalability. Each conversation can have its own collection, and messages can be stored as separate documents within that collection. This approach enables efficient querying and retrieval of messages specific to a particular conversation.

Notes on AI use, if applicable:       

Designing and Structuring Firestore Collections and Documents / Firestore Database
Question type: Multiple choice
You are a Firebase developer designing a messaging app using Firestore to store chat conversations. Each conversation can have multiple messages, and you want to ensure efficient querying and retrieval of messages. 

What should you do?
0 points
Store all messages as a single document within a single Firestore collection.
1 point
Store messages as separate documents within separate Firestore collections for each conversation.
0 points
Store all messages as separate documents within a single Firestore collection.
0 points
Store all messages as a single document within separate Firestore collections for each conversation. 




Question 2.7
Rationale and/or logic for the correct answer(s):    The correct option is D.Creating separate collections for products and orders and using document references to establish relationships. This approach allows for a more structured and scalable data model. In this approach, you can have a "products" collection and an "orders" collection, and use document references (such as product IDs) within the order documents to establish relationships with the respective products. This enables efficient querying and flexibility in managing the data.

Notes on AI use, if applicable:   
    
Designing and Structuring Firestore Collections and Documents / Firestore Database
Question type: Multiple choice
You are a Firebase developer building an e-commerce application using Firestore to store product and order information. Each product can have multiple orders associated with it, and each order can contain multiple products. You want to implement the relationship between products and orders in Firestore.

What should you do?
0 points
Embed the order details within each product document as a subcollection.
0 points
Duplicate product information within each order document.
0 points
Store the product IDs as an array within each order document.
1 point
Create separate collections for products and orders and use document references to establish relationships.




Question 2.8
Rationale and/or logic for the correct answer(s):    The correct option is D. Create a separate collection for posts and use document references (such as post IDs) within the user's profile document. This approach allows for better document size management and minimizes data duplication.

Notes on AI use, if applicable:       

Designing and Structuring Firestore Collections and Documents / Firestore Database
Question type: Multiple choice
You are a Firebase developer designing the data model for a social media application using Firestore. Each user has a profile document that contains information such as username, email, and bio. Additionally, each user has a list of posts associated with their profile. You want to optimize the data model to handle document size and data duplication efficiently.

What should you do?
0 points
Include the entire list of posts within the user's profile document.
0 points
Store only the post IDs within the user's profile document and retrieve post details separately when needed.
0 points
Duplicate the user's profile information within each post document.
1 point
Create a separate collection for posts and use document references within the user's profile document.




Question 2.9
Rationale and/or logic for the correct answer(s):    The most efficient approach for querying books by publication year is option D - storing the publication year as a number in the document. Storing it as a number allows for numerical comparison operators (such as greater than, less than, etc.) to be used in Firestore queries, which can greatly improve query performance.

Notes on AI use, if applicable:       

Designing and Structuring Firestore Collections and Documents / Firestore Database
Question type: Multiple choice
As a developer working with Firestore, you are designing a collection to store information about books in a library. One of the requirements is to allow users to search for books based on their publication year.

What data type should you use to store the publication year of books in the document?
0 points
String
0 points
Nested object
0 points
Boolean value
1 point
Number




Question 2.10
Rationale and/or logic for the correct answer(s):    The correct answer is option D. Add indexes to the Firestore collections for the attributes used in the search queries. By adding indexes to the Firestore collections, the database can optimize the query performance for the specified attributes, resulting in faster and more efficient search queries.

Notes on AI use, if applicable:       

Designing and Structuring Firestore Collections and Documents / Firestore Database
Question type: Multiple choice
You are developing a mobile app that uses Firestore as its backend database. The app allows users to search for products based on various attributes like price, category, and brand. You notice that the search queries are taking longer than expected, impacting the app's performance.

What should you do to improve the Firestore query performance?
0 points
Modify the app to perform client-side filtering instead of querying Firestore directly.
0 points
Implement caching mechanisms to store frequently accessed data locally.
0 points
Increase the server capacity to handle the increased query load.
1 point
Add indexes to the Firestore collections for the attributes used in the search queries.



Querying and Indexing Firestore Data

Question 2.11
Rationale and/or logic for the correct answer(s):    The correct option is D. Create a separate collection to store indexed search terms for each message and query against those search terms. This approach involves creating a separate collection where you store indexed search terms related to each message. When a user performs a text-based search, you can query against these indexed search terms to find relevant messages. This approach allows for efficient and flexible full-text search functionality within Firestore.

Notes on AI use, if applicable:       

Querying and Indexing Firestore Data / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a messaging app that allows users to search for specific messages based on keywords. You want to implement full-text search functionality to enable users to find messages that contain certain words or phrases.

What should you do?
0 points
Enable Firestore's built-in full-text search feature for text-based queries.
0 points
Use Firebase Cloud Functions to perform text-based queries on the message collection.
0 points
Implement a third-party search engine integration for more advanced search capabilities.
1 point
Create a separate collection to store indexed search terms for each message and query against those search terms.




Question 2.12
Rationale and/or logic for the correct answer(s):    The correct option is D. Create a composite index including sender, recipient, and message content fields. A composite index allows Firestore to efficiently query based on multiple fields at once. By creating a composite index with sender, recipient, and message content, the database can perform queries that involve these fields more efficiently.

Notes on AI use, if applicable:       

Querying and Indexing Firestore Data / Firestore Database
Question type: Multiple choice
You are a Firebase developer designing a Firestore database for a messaging application. The database will store user profiles and messages. Users will frequently search for messages based on sender, recipient, and message content. You want to optimize query performance.
 
What should you do?
0 points
Create separate indexes for sender, recipient, and message content fields.
0 points
Enable automatic indexing and let Firestore handle the indexing automatically.
0 points
Implement server-side filtering using Cloud Functions.
1 point
Create a composite index including sender, recipient, and message content fields.




Question 2.13
Rationale and/or logic for the correct answer(s):    The correct option is D WhereGreaterThanOrEqualTo("price", minPrice) and WhereLessThanOrEqualTo("price", maxPrice). This query allows you to retrieve documents where the "price" field is greater than or equal to the minimum price and less than or equal to the maximum price. It helps to retrieve products within the specified price range effectively.

Notes on AI use, if applicable:       

Querying and Indexing Firestore Data / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on an e-commerce platform. You want to implement a feature that allows users to filter products based on their price range.

Which query should you use in Firestore to retrieve products within a specified price range?
0 points
 WhereEqualTo("price", range)
0 points
WhereGreaterThan("price", minPrice) and WhereLessThan("price", maxPrice)
0 points
WhereArrayContains("price", range)
1 point
WhereGreaterThanOrEqualTo("price", minPrice) and WhereLessThanOrEqualTo("price", maxPrice)




Question 2.14
Rationale and/or logic for the correct answer(s):    The correct option is D. firestore.collection("projects").doc("abc123").collection("tasks").where("completed", "==", true). This query directly accesses the "tasks" subcollection within the "projects" collection, filters the documents based on the "completed" field with a value of true, and retrieves all completed tasks for the specific project with the ID "abc123".

Notes on AI use, if applicable:       

Querying and Indexing Firestore Data / Firestore Database
Question type: Multiple choice
You are a Firebase developer building a task management app using Firestore. The app has a collection called "projects" that contains project documents, and each project document has a subcollection called "tasks" that stores task documents. You want to retrieve all completed tasks for a specific project with the project ID "abc123".

Which query should you use to achieve this?
0 points
firestore.collection("tasks").where("projectId", "==", "abc123").where("completed", "==", true)
0 points
firestore.collection("projects").where("projectId", "==", "abc123").collection("tasks").where("completed", "==", true)
0 points
firestore.collection("projects").where("projectId", "==", "abc123").get().then(querySnapshot => querySnapshot.collection("tasks").where("completed", "==", true))
1 point
firestore.collection("projects").doc("abc123").collection("tasks").where("completed", "==", true)




Question 2.15
Rationale and/or logic for the correct answer(s):    The correct option is D Store latitude and longitude coordinates as separate fields and use Firestore's geospatial query operators to filter documents within the desired radius. By storing latitude and longitude coordinates as separate fields, you can leverage Firestore's geospatial query operators like near, within, and distance to efficiently search for documents within a specified radius.

Notes on AI use, if applicable:       

Querying and Indexing Firestore Data / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a location-based app. You want to implement a feature that allows users to search for restaurants within a specific radius.

What should you do?
0 points
Create a separate collection for restaurants, store geohash values for each restaurant, and use Firestore's geohash query operators to perform the radius search.
0 points
Enable the Geospatial Indexing feature in Firestore, which automatically indexes the location data and provides optimized geospatial queries.
0 points
Use the Firebase Realtime Database for geospatial queries.
1 point
Store latitude and longitude coordinates as separate fields and use Firestore's geospatial query operators to filter documents within the desired radius.


Implementing Real-time Data Synchronization

Question 2.16
Rationale and/or logic for the correct answer(s):    The correct option is D. Store the user's online/offline status as a field in their user document in Firestore. By adding an online/offline status field to the user document and updating it whenever a user goes online or offline, you can track their real-time presence. Using Firestore listeners, you can then monitor changes in this field and update the UI accordingly to display the online or offline status of friends.

Notes on AI use, if applicable:       

Implementing Real-time Data Synchronization / Firestore Database
Question type: Multiple choice
You are building a social media application using Firebase Firestore. You want to implement a real-time presence, where users can see the online or offline status of their friends.

What should you do?
0 points
Create a separate collection named "status" to store the online/offline status of each user.
0 points
Utilize Firebase Realtime Database instead of Firestore to store and update the online/offline status of users.
0 points
Implement a custom presence system using Firebase Cloud Functions.
1 point
Store the user's online/offline status as a field in their user document in Firestore. 




Question 2.17
Rationale and/or logic for the correct answer(s):    The correct option is D. Implement Firestore triggers in Cloud Functions to listen for changes in Firestore documents and perform the necessary actions in the external systems. By using Firestore triggers in Cloud Functions, you can set up event-based functions that are triggered whenever a change occurs in Firestore documents. This allows you to synchronize the data in real-time with the external systems seamlessly.

Notes on AI use, if applicable:       

Implementing Real-time Data Synchronization / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a project that requires real-time data synchronization between Firestore and external systems. You want to integrate real-time data synchronization with Firebase Cloud Functions.

What should you do?
0 points
Use Firebase Cloud Messaging to send data updates from Firestore to the external systems whenever a change occurs.
0 points
Periodically query Firestore for data changes in Cloud Functions and update the external systems based on the retrieved data.
0 points
Utilize Firebase Remote Config to manage the synchronization process between Firestore and the external systems.
1 point
Implement Firestore triggers in Cloud Functions to listen for changes in Firestore documents and perform the necessary actions in the external systems.




Question 2.18
Rationale and/or logic for the correct answer(s):    The correct option is D. Apply a manual conflict resolution process, where users are notified of conflicts and provided with a user interface to manually merge conflicting changes. This approach allows users to review and resolve conflicts on their own, ensuring the accuracy and consistency of the document. It provides flexibility and control over the merging process, accommodating complex conflicts that cannot be resolved automatically.

Notes on AI use, if applicable:  
     
Implementing Real-time Data Synchronization / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a collaborative document editing application. You want to handle conflicts that may arise when multiple users edit the same document simultaneously, and ensure data consistency.

What should you do?
0 points
Implement last-writer-wins (LWW) conflict resolution strategy, where the latest edit from any user overwrites conflicting changes.
0 points
Use a time-stamp-based conflict resolution strategy, where the edit with the earliest timestamp takes precedence over conflicting changes.
0 points
Utilize Firebase's built-in conflict resolution mechanism that automatically detects and resolves conflicts based on predefined rules.
1 point
Apply a manual conflict resolution process, where users are notified of conflicts and provided with a user interface to manually merge conflicting changes.




Question 2.19
Rationale and/or logic for the correct answer(s):    The correct option is D. Set up listeners on the relevant database nodes to receive real-time updates and propagate the changes to other connected users. By setting up listeners, you can monitor specific database nodes for changes and receive real-time updates whenever there are modifications. You can then use these updates to propagate the changes to other connected users in real-time.

Notes on AI use, if applicable:       

Implementing Real-time Data Synchronization / Firestore Database
Question type: Multiple choice
You are developing a real-time collaboration app using Firebase Realtime Database. You want to achieve real-time data updates using Firebase Realtime Database in order to ensure that whenever a user makes changes to a shared document, the updates are instantly reflected for all other users connected to the app.

What should you do?
0 points
Implement Firebase Cloud Messaging to send push notifications to all connected users whenever a change is made.
0 points
Periodically poll the database for changes and update the user interfaces of connected users accordingly.
0 points
Use Firebase Cloud Functions to monitor database changes and trigger updates for all connected users.
1 point
Set up listeners on the relevant database nodes to receive real-time updates and propagate the changes to other connected users.




Question 2.20
Rationale and/or logic for the correct answer(s):    The correct option is D. Utilize Firestore Listeners to receive real-time updates for task changes across devices or users. Firestore Listeners allow you to set up real-time listeners on specific documents or queries, enabling instant updates whenever a task is created, updated, or deleted. This ensures that all users connected to the app receive real-time updates and stay synchronized.

Notes on AI use, if applicable:       

Implementing Real-time Data Synchronization / Firestore Database
Question type: Multiple choice
You are developing a collaborative task management app using Firebase Firestore. The app allows multiple users to create, update, and delete tasks in real-time. You want to ensure real-time data synchronization between multiple devices or users.

What should you do?
0 points
Implement Firestore Transactions to handle concurrent updates and ensure data consistency.
0 points
Enable Firestore Security Rules to manage access and permissions for task operations.
0 points
Use Firebase Cloud Messaging to send push notifications to notify users about task updates.
1 point
Utilize Firestore Listeners to receive real-time updates for task changes across devices or users.



Firestore Security Rules and Data Validation

Question 2.21
Rationale and/or logic for the correct answer(s):    The correct option is D. This security rule ensures that the write operation is allowed only if the request is authenticated and the author of the blog post matches the authenticated user's UID. By implementing this rule, only the author of a blog post can update its "title" and "content" fields, providing field-level security.

Notes on AI use, if applicable:       

Firestore Security Rules and Data Validation  / Firestore Database
Question type: Multiple choice
You are developing a blogging application where users can create and manage their own blog posts. Each blog post document in Firestore has the following fields: "title", "content", "author", and "published". You want to implement field-level security to ensure that only the author of a blog post can update its "title" and "content" fields.

Which Firestore security rule should you implement?
0 points
allow write: if request.auth != null;
0 points
 allow write: if request.auth.uid == resource.data.author;
0 points
allow write: if request.resource.data.author != null;
1 point
allow write: if request.auth != null && request.resource.data.author == request.auth.uid;




Question 2.22
Rationale and/or logic for the correct answer(s):    The correct option is D. This expression checks if the user is authenticated (request.auth != null) and if the user's token has an "isAdmin" field set to true. If both conditions are met, the user is granted read and write access to the "adminCollection" collection.

Notes on AI use, if applicable:       

Firestore Security Rules and Data Validation  / Firestore Database
Question type: Multiple choice
You are a Firebase developer working on a project that involves securing Firestore data using security rules. You want to restrict access to a specific collection based on a condition stating that only users with an "isAdmin" field set to “true” should be allowed to read and write to the "adminCollection" collection.

Which conditional expression should you use?
0 points
allow read, write: if request.auth != null && request.auth.token.isAdmin;
0 points
allow read, write: if request.auth == null && request.auth.token.isAdmin === true;
0 points
allow read, write: if request.auth != null && isAdmin;
1 point
allow read, write: if request.auth = null && request.auth.token.isAdmin == true;




Question 2.23
Rationale and/or logic for the correct answer(s):    The correct option is D. This approach allows you to implement custom logic and validation rules on the server-side using Cloud Functions. By leveraging Firestore triggers, you can perform data validation and sanitization before data is stored in Firestore, ensuring data integrity and security.

Notes on AI use, if applicable:       

Firestore Security Rules and Data Validation  / Firestore Database
Question type: Multiple choice
You are a developer working with Firestore on a project collaboration application. You want to ensure that user input data is validated and sanitized before being stored in the database. 

What should you do?
0 points
Implement client-side validation and sanitization before sending data to Firestore.
0 points
Enable automatic validation and sanitization by enabling built-in Firestore AutoCleanse feature.
0 points
Apply data validation and sanitization through Firebase Authentication.
1 point
Use server-side validation and sanitization with Cloud Functions triggered by Firestore writes.




Question 2.24
Rationale and/or logic for the correct answer(s):    The correct option is D. This security rule restricts write access to only the specified field, 'field1', ensuring that other fields cannot be modified in the document. By using the hasOnly function with an array containing the specific field name, it ensures that only updates to that field are allowed.
Notes on AI use, if applicable:      

Firestore Security Rules and Data Validation  / Firestore Database
Question type: Multiple choice
You are a Firebase developer tasked with defining secure read and write operations in Firestore to ensure data confidentiality and integrity. You want to restrict write access to the 'field1' field in a document.

Which Firestore security rule should you use?
0 points
allow write: if request.resource.data.field1 == 'admin'
0 points
 allow write: if request.resource.data.field1 != null
0 points
allow write: if request.auth != null
1 point
allow write: if request.resource.data.keys().hasOnly(['field1'])




Question 2.25
Rationale and/or logic for the correct answer(s):    The correct option is D Implement a custom retry logic using exponential backoff strategy and error handling code in your application. By implementing a custom retry logic, you can handle intermittent network issues by automatically retrying the failed Firestore operations with increasing delay intervals using an exponential backoff strategy. This approach provides more control and flexibility in handling retries based on your specific application requirements.
Notes on AI use, if applicable:       

Firestore Security Rules and Data Validation  / Firestore Database
Question type: Multiple choice
You are a Firebase developer working with Firestore. You want to implement a reliable retry mechanism for Firestore operations to handle intermittent network issues.

What should you do?
0 points
Increase the timeout duration for Firestore operations to allow more time for successful execution.
0 points
Enable the built-in automatic retry feature in the Firestore SDK to handle transient failures.
0 points
Implement a manual retry mechanism by re-executing the Firestore operation multiple times until it succeeds.
1 point
Implement a custom retry logic using exponential backoff strategy and error handling code in your application.



Cloud Functions For Firebase
Developing and Deploying Cloud Functions

Question 3.1
Rationale and/or logic for the correct answer(s):    Option D is the correct answer. By using the Firebase Admin SDK, you can directly access and update the Firestore document from the Cloud Function. This approach allows you to perform the necessary calculations and update the document seamlessly within the function's execution.

Notes on AI use, if applicable:       

Developing and Deploying Cloud Functions / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer writing a Cloud Function using JavaScript/TypeScript to process incoming data from a real-time event. The function needs to perform some calculations and update a specific document in Firestore based on the processed data.

Which approach should you use to achieve this?
0 points
Use JavaScript/TypeScript promises within the Cloud Function to asynchronously update the Firestore document based on the processed data.
0 points
Use the Firebase Realtime Database API to query and update the Firestore document based on the processed data.
0 points
Use Firebase Cloud Messaging to send a notification to the Firestore document, triggering a separate function to update it.
1 point
Use the Firebase Admin SDK to access and update the Firestore document directly from the Cloud Function.



Question 3.2
Rationale and/or logic for the correct answer(s):  The correct option is to use the Firebase CLI (Command Line Interface) to deploy the Cloud Functions directly from your local development environment. This is the recommended and standard approach for deploying Cloud Functions in Firebase.  

Notes on AI use, if applicable:       

Developing and Deploying Cloud Functions / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer working on deploying Cloud Functions to Firebase for a project. You want to ensure a smooth deployment process and minimize any potential issues.

What should you do to deploy Cloud Functions effectively?
0 points
Write a custom deployment script using a different tool or framework outside of Firebase.
0 points
Upload the Cloud Function code as a compressed ZIP file and use the Firebase Command Line Interface (CLI) to deploy it.
0 points
Export the Cloud Functions as separate JavaScript files and upload them to Firebase using the web-based file uploader.
1 point
Use the Firebase Command Line Interface (CLI) to deploy the Cloud Functions directly from your local development environment.



Question 3.3
Rationale and/or logic for the correct answer(s):    option D is correct because using the Express.js framework allows you to define routes and easily parse the request body to extract the required data, such as the title, content, and author of the post.

Notes on AI use, if applicable:       

Developing and Deploying Cloud Functions / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer working with Cloud Functions. You are building an API endpoint that handles HTTP requests for a social media application. The endpoint should allow users to create new posts with the following information: title, content, and author.

How should you handle the HTTP request and extract the required data?
0 points
Implement a WebSocket connection to establish real-time communication between the client and server for creating new posts.
0 points
Store the post data in Firestore database and use Firebase Cloud Messaging to trigger a function whenever a new post is created.
0 points
Use the Firebase Realtime Database to handle the HTTP request and automatically save the post data as a new node in the database.
1 point
Use the Express.js framework to define a route for the API endpoint and parse the request body to extract the required data.



Question 3.4
Rationale and/or logic for the correct answer(s):    Option D is the correct answer because it suggests implementing a Cloud Function triggered by the "user.create" event, specifically designed to handle the first-time signup scenario.

Notes on AI use, if applicable:       

Developing and Deploying Cloud Functions / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer implementing Cloud Functions to handle authentication events in your application. You need to ensure that certain actions are triggered when a user signs up for the first time. 

What should you do?
0 points
Use a client-side JavaScript code snippet to detect the signup event and trigger the desired actions directly from the frontend.
0 points
Create a Cloud Function triggered by the "auth.user" event, which is emitted whenever a user account is created, updated, or deleted.
0 points
Enable the Firebase Authentication "onCreate" trigger, to create a Cloud Function that is executed whenever a new user account is created.
1 point
Implement a Cloud Function triggered by the "user.create" event, which is emitted when a new user account is created.



Question 3.5
Rationale and/or logic for the correct answer(s):     The recommended action is D,Enable Cloud Functions Error Reporting to receive detailed error logs and notifications.Enabling Cloud Functions Error Reporting allows you to receive comprehensive error logs and notifications when issues occur in your functions. It provides detailed information about the errors, including stack traces, timestamps, and other relevant data, helping you quickly identify and diagnose the problem.

Notes on AI use, if applicable:       

Developing and Deploying Cloud Functions / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer and you have deployed several Cloud Functions in your project. You notice that one of your functions is not working as expected and you suspect it might be throwing an error. You want to effectively monitor and debug your Cloud Functions to identify and resolve any issues. 

What should you do?
0 points
Use console.log() statements in your Cloud Functions code to output debug information to the Firebase console.
0 points
Enable Cloud Functions Stackdriver Profiler to analyze the performance and execution of your functions.
0 points
Set up Cloud Functions Triggers to automatically trigger a debug function when an error occurs.
1 point
Enable Cloud Functions Error Reporting to receive detailed error logs and notifications.




Triggering Functions with Firebase and Third-Party Events

Question 3.6
Rationale and/or logic for the correct answer(s):    The correct option for the question is D,Use Firebase Cloud Functions to automatically listen to database changes and trigger the function. Firebase Cloud Functions allow you to set up event-driven triggers that automatically respond to changes in your Firebase Realtime Database.



Notes on AI use, if applicable:       

Triggering Functions with Firebase and Third-Party Events / Cloud Functions For Firebase
Question type: Multiple choice
You are developing a real-time chat application using Firebase Realtime Database. Whenever a new message is added to the "messages" node in the database, you want to trigger a function that sends a push notification to all users in the chat room. 

What should you do?
0 points
Periodically poll the database for new messages using a scheduled function.
0 points
Implement a client-side listener to detect changes in the "messages" node and trigger the function. 
0 points
Use an API call to trigger the function every time a new message is added.
1 point
Use Firebase Cloud Functions to automatically listen to database changes and trigger the function. 




Question 3.7
Rationale and/or logic for the correct answer(s):    The correct option for this question is:D, Enable the Cloud Functions API in the Google Cloud Console and configure the necessary Pub/Sub topics and subscriptions. To set up the integration between Firebase Functions and Cloud Pub/Sub correctly, you need to perform the following steps: 1. Enable the Cloud Functions API: This step ensures that the necessary API is enabled in the Google Cloud Console, allowing you to use Cloud Functions effectively.  2.Configure Pub/Sub topics and subscriptions: You need to set up the appropriate Pub/Sub topics and subscriptions to handle the events that will trigger the Firebase Functions. This ensures that the events are properly routed to the functions for processing.


Notes on AI use, if applicable:       

Triggering Functions with Firebase and Third-Party Events / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer working on a project that requires triggering Firebase Functions based on events from Cloud Pub/Sub. You want to set up this integration.

What should you do?
0 points
Install the Cloud Pub/Sub client library in your Firebase project and write custom code to handle the event subscriptions. 
0 points
Use the Firebase CLI to create a new Pub/Sub trigger for the desired Firebase Function and specify the topic name. 
0 points
Configure the Firebase project's service account with the necessary permissions to access the Pub/Sub service.
1 point
Enable the Cloud Functions API in the Google Cloud Console and configure the necessary Pub/Sub topics and subscriptions. 



Question 3.8
Rationale and/or logic for the correct answer(s):    Option D is the correct approach because Firebase Analytics provides the capability to configure conversion events based on specific user actions, such as completing a purchase transaction. By setting up a conversion event for purchases, you can use it as a trigger to execute a specific function in your app.

Notes on AI use, if applicable:       

Triggering Functions with Firebase and Third-Party Events / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer and you want to trigger a specific function in your app whenever a user completes a purchase transaction. 

What should you do?
0 points
Use Firebase Remote Config to trigger the function based on user purchase events. 
0 points
Implement a custom event tracking mechanism in your app to trigger the function. 
0 points
Utilize Firebase Performance Monitoring to track user purchase events and trigger the function.
1 point
Configure a conversion event in Firebase Analytics and use it to trigger the function. 



Question 3.9
Rationale and/or logic for the correct answer(s):    The correct option is D,Create a separate Cloud Function that monitors the Firestore collection and detects batch write operations.When implementing a feature to trigger a function whenever a batch write operation is performed in Cloud Firestore, creating a separate Cloud Function that monitors the Firestore collection and detects batch write operations is the recommended approach. This approach allows you to have a dedicated function specifically designed to handle batch write events.


Notes on AI use, if applicable:       

Triggering Functions with Firebase and Third-Party Events / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer implementing a feature in your app where users can update multiple documents in Cloud Firestore simultaneously using batch writes. You want to trigger a function whenever a batch write operation is performed.

What should you do?
0 points
Implement a Cloud Firestore trigger that listens for individual document updates within the batch write.
0 points
Enable the Firestore batch write event listener in the Firebase console to automatically trigger a function on batch write operations. 
0 points
Modify the Firestore batch write API to include a custom function trigger for batch write events.
1 point
Create a separate Cloud Function that monitors the Firestore collection and detects batch write operations. 



Question 3.10
Rationale and/or logic for the correct answer(s):    Option D is the correct answer. Create a Cloud Scheduler job and configure the frequency and timing for the reminders. Integrating Cloud Scheduler with Firebase Functions requires creating a Cloud Scheduler job to schedule the execution of a Firebase Function. By creating a Cloud Scheduler job, you can specify the frequency and timing for sending the reminders.



Notes on AI use, if applicable:       

Triggering Functions with Firebase and Third-Party Events / Cloud Functions For Firebase
Question type: Multiple choice
You are developing a scheduling app that sends daily reminders to users. You want to integrate Cloud Scheduler with Firebase Functions to trigger a function that sends these reminders.

What should you do?
0 points
Implement a Firebase Function that sends the reminders and deploy it to your Firebase project. 
0 points
Configure a Cloud Scheduler HTTP target and provide the URL of the Firebase Function endpoint. 
0 points
Enable the necessary permissions and roles for Cloud Scheduler and Firebase Functions to communicate.
1 point
Create a Cloud Scheduler job and configure the frequency and timing for the reminders. 


Integrating Cloud Functions with other Firebase Services

Question 3.11
Rationale and/or logic for the correct answer(s):    The correct option for this question is D, Deploy the Cloud Functions separately and configure the necessary routing rules in Firebase Hosting to direct requests to the appropriate functions.To integrate Cloud Functions with Firebase Hosting, the recommended approach is to deploy the Cloud Functions separately and configure routing rules in Firebase Hosting. By deploying the functions separately, you can have dedicated server-side functionality while keeping your web application codebase separate.

Notes on AI use, if applicable:       

Integrating Cloud Functions with other Firebase Services / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer building a web application that requires server-side functionality for processing user requests. You decide to use Cloud Functions for this purpose. You also want to ensure that your web application is seamlessly integrated with Firebase Hosting.

What should you do?
0 points
Deploy the Cloud Functions separately and configure the necessary routing rules in Firebase Hosting to direct requests to the appropriate functions. 
0 points
Use Firebase Hosting's built-in serverless capabilities to automatically deploy and manage the Cloud Functions alongside your web application.
0 points
Create a separate Firebase project for hosting the Cloud Functions and establish a connection between this project and your main Firebase project.
1 point
Deploy the Cloud Functions separately and configure the necessary routing rules in Firebase Hosting to direct requests to the appropriate functions. 



Question 3.12
Rationale and/or logic for the correct answer(s):     The correct option is option D, Create a Cloud Function that triggers whenever a user is created and automatically sends a verification email to the user's registered email address. This action ensures that new users receive a verification email to confirm their email addresses, enhancing the security and authenticity of user accounts.

Notes on AI use, if applicable:       

Integrating Cloud Functions with other Firebase Services / Cloud Functions For Firebase
Question type: Multiple choice
You are developing a mobile application that requires user authentication using Firebase Authentication. You want to implement Cloud Functions to enhance the authentication process and perform additional operations upon user registration.

What should you do?
0 points
Implement a Cloud Function that triggers upon successful user login and updates a user-specific document in Firestore to track user activity. 
0 points
Implement a Cloud Function that listens to changes in user roles and automatically revokes access tokens for users with restricted permissions.
0 points
Implement a Cloud Function that intercepts authentication events and performs real-time user profile updates in the Firebase Realtime Database.
1 point
Implement a Cloud Function that triggers whenever a user is created and automatically sends a verification email to the user's registered email address. 



Question 3.13
Rationale and/or logic for the correct answer(s):   The correct option is D. Use Firestore triggers to listen for new document creation events in the specified collection and write the Cloud Function logic to retrieve the new document data and update the target document accordingly.
This approach leverages Firestore triggers, which provide a convenient way to react to specific events in Firestore, such as document creation. 

Notes on AI use, if applicable:       

Integrating Cloud Functions with other Firebase Services / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer and you want to write a Cloud Function that updates a field in another document whenever a new document is added to a specific Firestore collection.

What should you do to implement this integration effectively?
0 points
Implement a Firestore listener in the Cloud Function to detect new documents and execute the update logic.
0 points
Configure a scheduled function to scan the collection, identify new documents, and perform the required updates.
0 points
Utilize Firestore REST API to fetch the new document data and update the target document.
1 point
Use Firestore triggers to listen for new document creation events and update the target document accordingly.



Question 3.14
Rationale and/or logic for the correct answer(s):    The correct option is D. Modify the Cloud Functions code to include custom payload fields and values before sending the notification using the FCM API. This approach allows you to add custom data to the notification payload based on specific events. By modifying the Cloud Functions code, you can define and include the necessary custom payload fields and values before sending the notification using the FCM API.



Notes on AI use, if applicable:       

Integrating Cloud Functions with other Firebase Services / Cloud Functions For Firebase
Question type: Multiple choice
You are a developer working on a mobile messaging app. You are integrating Cloud Functions with Firebase Cloud Messaging (FCM) to handle push notifications. You want to customize the notification payload to include additional data for specific events.

Which should you do to achieve this?
0 points
Use Firebase Cloud Messaging console to define custom payload fields and values for each specific event. 
0 points
Implement a separate API endpoint in your Cloud Functions code to receive requests for customizing the notification payload.
0 points
Integrate a third-party library with Cloud Functions to provide additional customization options for the notification payload.
1 point
Modify the Cloud Functions code to include custom payload fields and values before sending the notification using the FCM API.



Question 3.15
Rationale and/or logic for the correct answer(s):    To achieve the integration and image resizing functionality effectively, you should implement a Cloud Function that triggers on image uploads to Firebase Storage. This Cloud Function can utilize a third-party image processing library to resize the images and generate thumbnails.

Notes on AI use, if applicable:       

Integrating Cloud Functions with other Firebase Services / Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer working on a project that requires integrating Cloud Functions with Firebase Storage. The project involves automatically resizing images uploaded to Firebase Storage and generating thumbnails for display.

What should you do to achieve this? 
0 points
Set up a separate server to handle the image resizing functionality and establish a direct connection with Firebase Storage for seamless integration. 
0 points
Use Firebase Hosting to serve the images and implement client-side JavaScript code to resize the images and generate thumbnails. 
0 points
Leverage Firebase Authentication to authenticate users before allowing them to upload images to Firebase Storage and trigger the image resizing functionality.
1 point
Implement a Cloud Function that triggers on image uploads to Firebase Storage and uses a third-party image processing library to resize the images and generate thumbnails.


Optimizing Function Performance and Scalability

Question 3.16
Rationale and/or logic for the correct answer(s):    The correct option for the given question is D, Implement a load balancer that evenly distributes incoming requests across multiple instances of the function.In scenarios where a single function is being overwhelmed due to a surge in user traffic, implementing a load balancer is an effective way to address the load balancing issue. A load balancer distributes the incoming requests across multiple instances of the function, ensuring that the workload is evenly distributed and no single instance is overloaded.



Notes on AI use, if applicable:       

Optimizing Function Performance and Scalability/ Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer tasked with optimizing the performance and scalability of Cloud Functions in your application. Your application  experienced a surge in user traffic and a single function is being overwhelmed. 

What should you do?
0 points
Increase the number of instances of the overloaded function to handle the increased workload.
0 points
Adjust the memory allocation for the overloaded function to improve its performance under high load.
0 points
Implement caching mechanisms to reduce the frequency of function invocations and improve response times.
1 point
Implement a load balancer that evenly distributes incoming requests across multiple instances of the function.



Question 3.17
Rationale and/or logic for the correct answer(s):    The correct option is to implement a client-side caching mechanism where the function stores the API response in local memory for a specified period of time before making a new request. This strategy reduces the frequency of API requests and improves the function's performance by serving the cached response for subsequent requests within the defined caching period. It minimizes the overhead of repeated API calls, resulting in faster response times and improved overall function efficiency.

Notes on AI use, if applicable:       

Optimizing Function Performance and Scalability/ Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer optimizing the performance of a Cloud Function that retrieves data from an external API. You notice that the function's response time is slower due to frequent API requests for the same data. To improve performance, you decide to implement a caching mechanism.

Which caching strategy should you use?
0 points
Use Redis caching by integrating a Redis server with your Firebase project to store and retrieve the API response.
0 points
Implement browser caching by setting appropriate cache headers in the function's HTTP response to allow the client's browser to cache the API response.
0 points
Enable Firebase Realtime Database caching to cache the API response and serve it directly from the database without making additional API requests.
1 point
Implement a client-side caching mechanism where the function stores the API response in local memory for a specified period of time before making a new request.



Question 3.18
Rationale and/or logic for the correct answer(s):    The correct answer is D, Implementing caching mechanisms to store and retrieve frequently accessed data. Caching allows you to store and retrieve data that is frequently accessed, reducing the need for repeated computations or expensive database queries. By implementing caching mechanisms, you can significantly improve the performance of the function by reducing the time it takes to retrieve and process data.



Notes on AI use, if applicable:       

Optimizing Function Performance and Scalability/ Cloud Functions For Firebase
Question type: Multiple choice
You are working on a Firebase Cloud Functions project that performs extensive calculations and data processing. However, you notice that the function response time is slower than desired, leading to performance issues. You want to optimize the code execution to improve the overall function response time.

What should you do to achieve this?
0 points
Increase the memory allocation for the function to improve processing speed. 
0 points
Divide the function into smaller, more specialized functions to reduce execution time.
0 points
Enable parallel processing by utilizing asynchronous operations and multithreading.
1 point
Implement caching mechanisms to store and retrieve frequently accessed data.



Question 3.19
Rationale and/or logic for the correct answer(s):    Option D is the correct answer,Implement message queues to decouple the time-consuming task from the main function execution. This allows the function to return quickly and offloads the task to be processed asynchronously.By implementing message queues, you introduce an asynchronous processing mechanism that separates the time-consuming task from the main function execution.

Notes on AI use, if applicable:       

Optimizing Function Performance and Scalability/ Cloud Functions For Firebase
Question type: Multiple choice
You are an application developer tasked with optimizing the performance and scalability of your Cloud Functions. You have identified a function that performs a time-consuming task synchronously, causing delays in processing. To improve performance, you want to leverage asynchronous processing. 

What should you do to achieve this?
0 points
Enable auto-scaling for the function to handle increased workloads.
0 points
Split the function into multiple smaller functions to distribute the workload.
0 points
Increase the memory allocation of the function to improve processing speed.
1 point
Implement message queues to decouple the time-consuming task from the main function execution.



Question 3.20
Rationale and/or logic for the correct answer(s):    The best answer to the question would be option D Utilize Firebase Performance Monitoring tools to analyze the function's execution time, identify slow-performing areas, and gather insights for optimization.

Notes on AI use, if applicable:       

Optimizing Function Performance and Scalability/ Cloud Functions For Firebase
Question type: Multiple choice
You are a Firebase developer working on a cloud-based application. You notice that one of your Cloud Functions is experiencing performance issues, causing delays in processing user requests. You suspect a bottleneck in the function's execution.

What should you do to identify performance bottlenecks?
0 points
Implement comprehensive logging in the Cloud Functions and analyze the function's execution time using the logs. 
0 points
Conduct load testing to simulate high traffic and stress conditions on the Cloud Function and analyze the function's execution time. 
0 points
Utilize profiling tools specific to the programming language or framework used in your Cloud Functions to analyze the function’s execution time. 
1 point
Utilize Firebase Performance Monitoring tools to analyze the function's execution time.


Error Handling and Logging in Cloud Functions

Question 3.21
Rationale and/or logic for the correct answer(s):    Setting an exponential backoff strategy with gradually increasing intervals between retries is the recommended approach when implementing retry logic in Cloud Functions. This strategy helps enhance the reliability of the function by avoiding overwhelming the server with repeated immediate retries. 

Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You are a developer working with Cloud Functions. You have implemented a function that performs an important operation. However, you occasionally encounter transient errors that cause the function to fail. You want to enhance the reliability of your function by implementing retry logic for failed operations.

What should you do when implementing retry logic in Cloud Functions?
0 points
Determine the maximum number of retry attempts based on the criticality of the operation and the expected error frequency.
0 points
Implement robust error handling and logging mechanisms to capture and analyze the specific errors that trigger the retries.
0 points
Apply conditional retry logic based on specific error codes or error messages to selectively retry only when appropriate.
1 point
Set an exponential backoff strategy with gradually increasing intervals between retries to avoid overwhelming the server.



Question 3.22
Rationale and/or logic for the correct answer(s):    The correct option is to check the Cloud Function logs and error messages for any relevant information. By reviewing the logs, you can identify any errors or exceptions thrown during the execution of the Cloud Function. The logs can provide valuable insights into the specific issue causing the function to fail, allowing you to diagnose and resolve the problem effectively.

Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You have deployed a Cloud Function in your Firebase project that processes incoming data and updates a Firestore collection. However, you notice that the Cloud Function is not functioning as expected, and the updates to the Firestore collection are not occurring. You want to identify the cause of the issue.

What should you do?
0 points
Enable verbose logging in the Cloud Function code to capture detailed execution steps. 
0 points
Add “console.log” statements at key points in the Cloud Function code to track the data flow. 
0 points
Use Firebase DebugView to analyze the Cloud Function's behavior and identify any anomalies. 
1 point
Check the Cloud Function logs and error messages for any relevant information.



Question 3.23
Rationale and/or logic for the correct answer(s):     Implementing secure logging mechanisms is crucial for protecting sensitive information in error logs. By encrypting user data and masking personally identifiable information (PII), we ensure that even if the logs are accessed by unauthorized individuals, they won't be able to decipher the sensitive data. This helps to maintain the confidentiality and privacy of user information, reducing the risk of data breaches and unauthorized access.

Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You are a developer working with Cloud Functions and you want to ensure proper security considerations for error handling and logging.

What should you do to enhance security?
0 points
Store error logs in a private bucket with restricted access to authorized users only.
0 points
Log limited stack traces in error logs for debugging purposes.
0 points
Enable moderate logging in production environments to capture necessary error information.
1 point
Implement secure logging mechanisms that obfuscate sensitive information in error logs. 



Question 3.24
Rationale and/or logic for the correct answer(s):    By wrapping the code within a try-catch block, you can catch any potential errors that occur during the execution of the Cloud Function.Using the ‘throw’ statement allows you to propagate the error to the caller function, ensuring that the error is properly handled and not ignored.



Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You are a developer working with Cloud Functions in your project. You have implemented error handling and propagation mechanisms to ensure robustness and reliability. However, you are facing an issue where an error is occurring within a Cloud Function, but it is not being propagated correctly to the caller function.

How should you handle and propagate errors in Cloud Functions?
0 points
Use the ‘console.error’ method within the Cloud Function to log the error and rely on Cloud Functions' built-in error propagation mechanism. 
0 points
Send an HTTP response with an appropriate error status code and message from the Cloud Function to indicate the error to the caller function.
0 points
Log the error within the Cloud Function and use a global variable to indicate the error state to the caller function. 
1 point
Wrap the code within a try-catch block and use the ‘throw’ statement to propagate the error to the caller function. 



Question 3.25
Rationale and/or logic for the correct answer(s):    This option is correct as it suggests implementing custom error logging within the Cloud Functions code. By logging errors within the functions themselves, you can have better visibility into specific errors that occur during execution.

Notes on AI use, if applicable:       

Error Handling and Logging in Cloud Functions/ Cloud Functions For Firebase
Question type: Multiple choice
You are developing a serverless application using Cloud Functions in Firebase. As part of the development process, you want to ensure effective error detection and monitoring for your Cloud Functions. You decide to implement logging and monitoring mechanisms to track any errors that occur during function execution.

What should you do to achieve this?
0 points
Utilize Firebase Crashlytics to track and analyze function errors.
0 points
Use Firebase Performance Monitoring to track function execution time.
0 points
Utilize Firebase Analytics for error detection and monitoring.
1 point
Implement custom error logging in the Cloud Functions code.



















Firebase Cloud Messaging
Sending and Receiving Push Notifications

Question 4.1
Rationale and/or logic for the correct answer(s):  The correct option is A.When registering devices for push notifications, Firebase generates a unique device token for each device using its SDK. This token serves as a unique identifier for the device and is required to send push notifications to that specific device.

Notes on AI use, if applicable:       

Sending and Receiving Push Notifications / Firebase Cloud Messaging
Question type: Multiple choice
You are developing a mobile application that utilizes Firebase Cloud Messaging (FCM) for sending push notifications. As part of the registration process, you need to register devices to receive push notifications.

How should you register devices?
1 point
Generate a unique device token using the Firebase SDK and store it on the device.
0 points
Retrieve the user's email address and use it as the device registration identifier.
0 points
Use the device's IP address as the registration identifier for push notifications.
0 points
Implement a custom registration process using third-party authentication providers.



Question 4.2
Rationale and/or logic for the correct answer(s):    The correct option is B. By creating user groups based on cuisine preferences, you can easily target specific segments and send relevant push notifications. 

Notes on AI use, if applicable:       

Sending and Receiving Push Notifications / Firebase Cloud Messaging
Question type: Multiple choice
You are developing a mobile app for a food delivery service using Firebase Cloud Messaging (FCM) to send push notifications. The app has different user segments based on their preferred cuisine. You want to send targeted push notifications to users belonging to a specific cuisine segment.

What should you do?
0 points
Send separate push notifications to each user individually based on their cuisine preference.
1 point
Create user groups for each cuisine segment and send push notifications to the respective groups.
0 points
Use a single user segment for all users and include the cuisine preference in the push notification payload.
0 points
Use Firebase Authentication to authenticate users and send personalized push notifications based on their cuisine preference.



Question 4.3
Rationale and/or logic for the correct answer(s):    The correct option is D,  By adding a click action to the push notification payload, you can define the desired behavior when users click on the notification.

Notes on AI use, if applicable:       

Sending and Receiving Push Notifications / Firebase Cloud Messaging
Question type: Multiple choice
You are developing a messaging app using Firebase Cloud Messaging (FCM) for push notifications. When users receive a push notification and click on it, you want to navigate them to the corresponding chat screen within the app.

What should you do to achieve this?
0 points
Implement a custom broadcast receiver in your app to handle the push notification click event and programmatically navigate to the chat screen.
0 points
Configure deep links in your app and include the chat room information in the push notification payload.
0 points
Use Firebase Analytics to track push notification click events, and based on the event data, programmatically navigate to the chat screen.
1 point
Include a click action in the push notification payload to navigate users to the chat screen when clicked.



Question 4.4
Rationale and/or logic for the correct answer(s):    Option 1 is the most appropriate approach because it offers users direct control over their push notification preferences. By providing a dedicated settings menu within the app, users can easily find and modify their opt-in and opt-out choices based on their preferences.

Notes on AI use, if applicable:       

Sending and Receiving Push Notifications / Firebase Cloud Messaging
Question type: Multiple choice
You are developing a mobile application that allows users to receive push notifications for important updates and announcements. You want to provide an option for users to easily manage their opt-in and opt-out preferences for push notifications.

What should you do to implement this feature?
1 point
Provide a clear and easily accessible settings menu within the app where users can toggle their push notification preferences.
0 points
Implement a one-time prompt during app onboarding to ask users if they want to receive push notifications.
0 points
Require users to manually register their device tokens for push notifications in the app's settings menu to opt-in.
0 points
Send periodic emails to all users with a link to manage their push notification preferences on a web portal.



Question 4.5
Rationale and/or logic for the correct answer(s):    The correct option is option D.The Firebase Admin SDK provides a set of server-side APIs that allows you to securely authenticate with Firebase and send messages to FCM.

Notes on AI use, if applicable:       

Sending and Receiving Push Notifications / Firebase Cloud Messaging
Question type: Multiple choice
You are a developer working on a project that requires integrating Firebase Cloud Messaging (FCM) with a server-side system.

What should you do to ensure successful integration?
0 points
Use the FCM API to send HTTP requests directly from the server-side system to Firebase servers.
0 points
Implement a message broker system that relays messages between the server-side system and FCM.
0 points
Create a custom WebSocket connection between the server-side system and Firebase servers.
1 point
Utilize the Firebase Admin SDK to establish a secure connection and send messages from the server-side system.


Configuring and Managing Message Topics

Question 4.6
Rationale and/or logic for the correct answer(s):    The correct option is B. In this scenario, the app allows users to join interest-based communities, and the Cloud Function can dynamically create and update message topics based on the users' chosen communities.

Notes on AI use, if applicable:       

Configuring and Managing Message Topics/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer working on a social networking app that includes a messaging feature. Users can join various interest-based communities and receive notifications related to their chosen communities. To facilitate this, you want to implement the functionality for creating and managing message topics.


What should you do?
0 points
Use a centralized database to store user subscriptions and manage topic updates.
1 point
Implement a Cloud Function to automatically create and update message topics based on user preferences.
0 points
Manually create and manage message topics in the Firebase console for each user subscription.
0 points
Utilize third-party services for creating and managing message topics in the app.



Question 4.7
Rationale and/or logic for the correct answer(s):    The correct option is A.This approach allows for a flexible and customizable topic hierarchy system. By using a naming convention and defining parent-child relationships between topics, you can organize notifications in a structured manner.

Notes on AI use, if applicable:       

Configuring and Managing Message Topics/ Firebase Cloud Messaging
Question type: Multiple choice
You are a developer working on a messaging app with Firebase Cloud Messaging. You want to implement a topic hierarchy to organize notifications based on user interests, and to use nested topics to further categorize notifications within specific topics. 

What should you do?
1 point
Create a logical structure for topic hierarchy using a naming convention and establish parent-child relationships between topics.
0 points
Use Firebase Cloud Messaging's built-in support for topic hierarchy to automatically organize notifications based on predefined categories.
0 points
Implement custom logic in your app to manage topic hierarchy and track nested topics using Firebase Realtime Database.
0 points
Utilize Firebase Cloud Firestore to store topic hierarchy and nested topics data and retrieve it dynamically for notification targeting.



Question 4.8
Rationale and/or logic for the correct answer(s):    The correct answer is option D Implement custom logic in the server-side code to filter and send notifications only to the desired topic subscribers. This approach allows you to control the delivery of targeted notifications by applying filters and conditions on the server-side. By implementing custom logic, you can specify the criteria that determine when a notification should be sent to subscribers of a particular topic. 

Notes on AI use, if applicable:       

Configuring and Managing Message Topics/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer tasked with implementing targeted notifications for a messaging app. You want to send notifications to users who are subscribed to a specific topic only when certain conditions are met.

What should you do?
0 points
Use Firebase Cloud Messaging to send notifications to all subscribed users and handle filtering within the client app based on conditions.
0 points
Utilize Firebase Authentication to authenticate users and determine their eligibility for receiving targeted notifications.
0 points
Modify the Firebase Cloud Messaging SDK to add custom filters and conditions for each notification sent.
1 point
Implement custom logic in the server-side code to filter and send notifications only to topic subscribers.



Question 4.9
Rationale and/or logic for the correct answer(s):     The correct option is D.This ensures that the updated topic includes the additional users and maintains the existing subscribers.

Notes on AI use, if applicable:       

Configuring and Managing Message Topics/ Firebase Cloud Messaging
Question type: Multiple choice
You are working on a messaging app that utilizes Firebase Cloud Messaging (FCM) for sending push notifications to subscribed users. As part of a new feature release, you want to update an existing message topic to include additional users.

What should you do?
0 points
Use the Firebase Admin SDK to update the topic subscribers programmatically.
0 points
Use Firebase Cloud Firestore to store and update the user list for the topic.
0 points
Implement a Cloud Function that automatically updates the topic subscribers based on predefined conditions.
1 point
Retrieve the existing topic subscribers, add the new users to the subscriber list, and update the topic configuration in the Firebase Console.



Question 4.10
Rationale and/or logic for the correct answer(s):  The correct option is C.  By implementing custom user roles and permissions using Firebase Authentication, you can define specific roles for fitness trainers and assign the necessary permissions for them to send messages to the "Workout Updates" topic. This approach provides more flexibility and control over user access and permissions management.

Notes on AI use, if applicable:       

Configuring and Managing Message Topics/ Firebase Cloud Messaging
Question type: Multiple choice
You are the administrator of a fitness app that sends push notifications to users for workout reminders and updates. The app uses Firebase Cloud Messaging to deliver notifications, and you want to ensure that only authorized fitness trainers can send messages to the "Workout Updates" topic.

What should you do to control access and permissions for the "Workout Updates" topic?
0 points
Implement Firebase Authentication and only allow fitness trainers with verified accounts to send messages to the "Workout Updates" topic.
0 points
Set up topic-level security rules in Firebase Cloud Messaging to define that only fitness trainers can send messages to the "Workout Updates" topic.
1 point
Implement custom user roles and permissions using Firebase Authentication and assign the necessary permissions to fitness trainers for the "Workout Updates" topic.
0 points
Implement Firebase Realtime Database and use custom security rules to restrict write access to the "Workout Updates" topic to authorized fitness trainers only.









Customizing Notification Payloads

Question 4.11
Rationale and/or logic for the correct answer(s):    Option C is the correct approach as Firebase Dynamic Links allow you to generate unique deep links for each notification. This ensures that when users tap on the notification, they are directly taken to the chat screen where they can access their new messages.

Notes on AI use, if applicable:       

Customizing Notification Payloads/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer working on a social media app, you are implementing push notifications to notify users about new messages. In addition to displaying a notification message, you want to include a deep link that takes the user directly to the chat screen when they tap on the notification. 

Which approach should you take to include deep links in your notification payloads?
0 points
Use a generic deep link that redirects users to a landing page within the app.
0 points
Include a shortened URL of the chat screen as a string in the notification payload.
1 point
Implement Firebase Dynamic Links to generate unique deep links for each notification.
0 points
Encode the chat screen's URL as a custom header in the notification payload.



Question 4.12
Rationale and/or logic for the correct answer(s):    The correct option is D Include the image URL in the notification payload and let the client app download and display the image. When adding image attachments to notification payloads in Firebase, it's recommended to include the URL of the image rather than encoding the entire image or attaching it directly.

Notes on AI use, if applicable:       

Customizing Notification Payloads/ Firebase Cloud Messaging
Question type: Multiple choice
You are developing a social media app that sends push notifications to users for new posts. As part of enhancing the user experience, you want to include image attachments in the push notification payloads. 

What should you do to achieve this?
0 points
Encode the image as a base64 string and include it in the data payload of the notification.
0 points
Attach the image directly to the notification payload using the Firebase Cloud Messaging API. 
0 points
Convert the image to a Firebase Cloud Storage URL and include it in the notification payload. 
1 point
Include the image URL in the notification payload and let the client app download and display the image





Question 4.13
Rationale and/or logic for the correct answer(s):  The correct answer is D Use a placeholder in the notification payload and retrieve the dynamic content when the notification is triggered. By using a placeholder, such as an identifier or token, in the notification payload, you can dynamically fetch the actual item price and product link when the notification is triggered.   

Notes on AI use, if applicable:       

Customizing Notification Payloads/ Firebase Cloud Messaging
Question type: Multiple choice
You are developing a shopping app that sends push notifications to users whenever there is a price drop on their favorite items. To provide personalized information in the notification, you want to include the actual price of the item and a direct link to the product page. 

What should you do to include dynamic content in the notification payloads?
0 points
Embed the item price and product link directly in the notification payload.
0 points
Generate a separate notification payload for each user with their specific item details.
0 points
Include a static link to the shopping app's homepage in the notification payload.
1 point
Use a placeholder in the notification payload and retrieve the dynamic content when the notification is triggered.



Question 4.14
Rationale and/or logic for the correct answer(s):    Option D is the correct answer as it aligns with the best practice of providing separate notification payloads for each supported language and specifying the language in the notification payload itself. This approach enables effective localization of notifications and ensures that users receive notifications in their preferred language.

Notes on AI use, if applicable:       

Customizing Notification Payloads/ Firebase Cloud Messaging
Question type: Multiple choice
As a developer working on a fitness app with Firebase Cloud Messaging, you want to ensure that users receive localized notifications in their preferred language. The app supports English, Spanish, and French. You need to implement a solution that customizes the notification payloads based on the user's language settings. 

What should you do to achieve this?
0 points
Utilize Firebase Remote Config to update notification messages dynamically based on the user's language selection.
0 points
Store localized messages in Firestore, and retrieve messages based on the user's language setting.
0 points
Use automatic language detection to send notifications in the user's preferred language, translating messages on the server-side.
1 point
Implement separate payloads for each language, specifying language in the "lang" field for localized notifications.



Question 4.15
Rationale and/or logic for the correct answer(s):   The correct option is d) Customize the notification channel settings in the app's manifest file to define the priority and visibility of notifications. In Firebase, you can customize the priority and visibility of notifications by configuring the notification channel settings in the app's manifest file.  

Notes on AI use, if applicable:       

Customizing Notification Payloads/ Firebase Cloud Messaging
Question type: Multiple choice
You are developing a messaging app that sends notifications to users for new messages. As part of the notification customization, you want to prioritize and control the visibility of notifications based on their importance.

How should you customize the priority and visibility of notifications in Firebase?
0 points
Use the setPriority() method to assign a numeric value to each notification and control its priority level.
0 points
Modify the system settings on the user's device to change the priority and visibility of notifications globally.
0 points
Set the visibility property in the notification payload to "private" or "public" to control who can see the notification.
1 point
Customize the notification channel settings in the app's manifest file to define the priority and visibility of notifications.


Handling Message Delivery and Receipts

Question 4.16
Rationale and/or logic for the correct answer(s):   The correct option is D. This approach allows you to leverage the native push notification services provided by each platform to ensure optimal delivery and device-specific features. FCM is the recommended service for Android devices, while APNs is the recommended service for iOS devices.

Notes on AI use, if applicable:       

Handling Message Delivery and Receipts/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer tasked with implementing push notification delivery to multiple platforms for a messaging app. The app needs to support both Android and iOS devices. 

What should you do to achieve this?
0 points
Use FCM exclusively and rely on its built-in capability to handle push notification delivery to both Android and iOS devices.
0 points
Implement a custom push notification solution using third-party libraries specific to Android and iOS platforms.
0 points
Use Firebase In-App Messaging to deliver push notifications to both Android and iOS devices.
1 point
Use Firebase Cloud Messaging (FCM) for Android and Apple Push Notification service (APNs) for iOS to implement separate push notifications.





Question 4.17
Rationale and/or logic for the correct answer(s):    The correct option is D. Implement exponential backoff with increasing delay between retries. This approach helps in handling message retries and fallback mechanisms effectively by progressively increasing the delay between retries, allowing for network stability to be restored.

Notes on AI use, if applicable:       

Handling Message Delivery and Receipts/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer implementing a messaging feature in your mobile app using Firebase Cloud Messaging (FCM). Network issues mean that messages sometimes fail to be delivered to the target devices. You want to handle message retries and fallback mechanisms in FCM.

What should you do?
0 points
Utilize FCM's collapse key feature to consolidate and optimize message delivery.
0 points
Increase the priority level of failed messages to expedite their delivery.
0 points
Retry message delivery indefinitely until successful, without any delays.
1 point
Implement exponential backoff with increasing delay between retries.



Question 4.18
Rationale and/or logic for the correct answer(s):    The correct option for monitoring and logging message delivery and receipt events is option D. Implement custom logging within your app to record message delivery and receipt events. By implementing custom logging, you have more control over what data is captured and how it is logged.

Notes on AI use, if applicable:       

Handling Message Delivery and Receipts/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer, you want to monitor and log the delivery and receipt events of messages sent through Firebase Cloud Messaging. 

What should you do to achieve this?
0 points
Enable Firebase Analytics to automatically track message delivery and receipt events.
0 points
Use Firebase Crashlytics to track message delivery and receipt events.
0 points
Use Firebase Performance Monitoring to measure the performance of message delivery and receipt.
1 point
Implement custom logging within your app to record message delivery and receipt events.



Question 4.19
Rationale and/or logic for the correct answer(s):    The correct option is D. Apply a dynamic message queueing strategy that adjusts based on current system capacity. This approach allows for efficient message delivery by dynamically managing the queue based on the current system load. It ensures that messages are processed and sent out in a controlled manner, preventing system overload or delays.

Notes on AI use, if applicable:       

Handling Message Delivery and Receipts/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer tasked with managing message queueing and throttling for efficient delivery in your messaging application. You want to ensure that messages are sent out smoothly without overwhelming the system or causing delays.

What should you do?
0 points
Implement a fixed delay between message sends to ensure a steady flow.
0 points
Use Firebase Cloud Functions to automatically throttle message delivery based on system load.
0 points
Increase the maximum concurrent connections to the Firebase Cloud Messaging server.
1 point
Apply a dynamic message queueing strategy that adjusts based on current system capacity.



Question 4.20
Rationale and/or logic for the correct answer(s):    The correct option is option D. Enable the built-in message delivery status tracking feature provided by Firebase Cloud Messaging. Firebase Cloud Messaging (FCM) offers a built-in feature to track the delivery status of messages. By enabling this feature, FCM automatically reports the delivery status of each message, including whether it was delivered to the device or encountered any errors during the delivery process. 


Notes on AI use, if applicable:       

Handling Message Delivery and Receipts/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer, you are implementing message delivery status tracking and reporting for a messaging app. You want to provide insights into the delivery status of each message to the app administrators.

What should you do to achieve this?
0 points
Use Firebase Cloud Functions to listen for delivery events and update a separate Firestore collection with message delivery statuses.
0 points
Implement custom client-side code to track message delivery status and periodically send updates to a backend server for reporting.
0 points
Integrate with a third-party analytics service to track message delivery and generate comprehensive reports.
1 point
Enable the built-in message delivery status tracking feature provided by Firebase Cloud Messaging.


Implementing Token Refresh and Registration Management

Question 4.21
Rationale and/or logic for the correct answer(s):    The correct option is D. Periodically request a new token from the server before the current token expires. By proactively requesting a new token before the current one expires, the app can ensure a seamless user experience without the need for frequent login prompts. This approach allows the app to maintain an active and valid token throughout the user's session, reducing interruptions and enhancing security.

Notes on AI use, if applicable:       

Implementing Token Refresh and Registration Management/ Firebase Cloud Messaging
Question type: Multiple choice
You are developing a mobile app that uses Firebase Authentication for user login and authentication. The app requires a token refresh mechanism to ensure a seamless user experience without frequent login prompts.

What should you do to implement token refresh logic on the client-side?
0 points
Use Firebase Realtime Database to store and retrieve the user's token, automatically refreshing it when necessary.
0 points
Utilize Firebase Remote Config to remotely update the token expiration time and trigger a token refresh.
0 points
Implement a WebSocket connection to the server, where the server notifies the app to refresh the token.
1 point
Periodically request a new token from the server before the current token expires.




Question 4.22
Rationale and/or logic for the correct answer(s):    The correct approach to revoking and invalidating user tokens when necessary is to implement a token revocation list and check the validity of tokens against this list during authentication. This approach allows for granular control over token revocation and provides a secure way to invalidate tokens when certain conditions are met, such as when a user's account is suspended or compromised. 

Notes on AI use, if applicable:       

Implementing Token Refresh and Registration Management/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer and you want to implement a mechanism to revoke and invalidate user tokens when certain conditions are met, such as when a user's account is suspended or compromised.

What should you do to achieve this?
0 points
Update the user's account status directly in the Firebase Authentication database to invalidate their tokens.
0 points
Use Firebase Cloud Messaging to send a revocation signal to user devices, triggering token invalidation upon receipt.
0 points
Set a short expiration time for all user tokens to automatically invalidate them after a certain period.
1 point
Implement a token revocation list and check the validity of tokens against this list during authentication.




Question 4.23
Rationale and/or logic for the correct answer(s):    The correct option for this scenario is option D. Implement session management using server-side cookies and track user sessions. This approach involves generating a unique session identifier on the server-side upon successful login, storing it as a secure cookie in the user's browser, and tracking the user's session using the session identifier.

Notes on AI use, if applicable:       

Implementing Token Refresh and Registration Management/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer tasked with implementing a user authentication system for a web application. You want to maintain user sessions and allow persistent login states across browser sessions. 

What should you do to achieve this?
0 points
Use Firebase Authentication to handle user login sessions automatically.
0 points
Use Firebase Realtime Database to store and manage user session data.
0 points
Implement session management using server-side sessions and unique session identifiers.
1 point
Implement session management using server-side cookies and track user sessions.



Question 4.24
Rationale and/or logic for the correct answer(s):    The correct option is D. Use Firebase Authentication to handle user registration and token management automatically. Firebase Authentication provides built-in mechanisms for user registration and token management. It securely stores and manages user tokens, allowing for easy retrieval when needed. 


Notes on AI use, if applicable:       

Implementing Token Refresh and Registration Management/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer tasked with managing user registration and authentication tokens for a mobile application. You want to ensure that user tokens are securely stored and can be easily retrieved when needed. 

What should you do to achieve this?
0 points
Encrypt user tokens using a strong encryption algorithm and store them in a secure Firebase Cloud Storage bucket.
0 points
Generate unique user tokens and store them as cookies in the user's browser for seamless authentication.
0 points
Utilize Firebase Remote Config to store and retrieve user tokens securely.
1 point
Use Firebase Authentication to handle user registration and token management automatically.



Question 4.25
Rationale and/or logic for the correct answer(s):    The correct answer is option D. Use a Firebase Authentication trigger in a Cloud Function to detect token expiration and automatically refresh it. By utilizing Firebase Authentication triggers, you can detect when a token is about to expire and trigger a Cloud Function to automatically refresh the token.

Notes on AI use, if applicable:       

Implementing Token Refresh and Registration Management/ Firebase Cloud Messaging
Question type: Multiple choice
You are a Firebase developer developing an application that utilizes Firebase Authentication for user authentication and authorization. The tokens issued by Firebase Authentication have an expiration time of one hour. You want to ensure seamless user experience without frequent logins by implementing token refresh logic using Cloud Functions.

What should you do?
0 points
Schedule a Cloud Function to run every 55 minutes to refresh tokens before they expire.
0 points
Implement a client-side logic to refresh tokens by calling the Firebase Authentication API.
0 points
Implement a background job to periodically check the token expiration and trigger a token refresh.
1 point
Use a Firebase Authentication trigger in a Cloud Function to detect token expiration and automatically refresh tokens.










